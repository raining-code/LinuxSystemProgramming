使用系统调用poll实现一个多路转接的TCP服务器(将客户端发送的数据进行打印)

poll函数原型
int poll(struct pollfd* fds,nfds_t nfds,int timeout);
第二个参数nfds表示第一个参数dfs数组的大小
第三个参数传-1表示阻塞等待,传0表示立即返回
struct pollfd{
    int fd;//要监视的文件描述符
    short events;//监视这个文件描述符上的什么事件,POLLIN表示读事件,POLLOUT表示写事件
    short revents;//这个文件描述符上什么事件就绪
};

poll函数的返回值也是就绪的文件描述符的个数

poll的优点：
1.将监听和返回分离，需要监听哪些事件，将其设置进入events中，哪些事件就绪，将其设置进入revents中
2.可以同时监视多个文件描述符，这也是所有多路转接的特点
3.poll监视的文件描述符个数没有上限，由fds数组决定

poll的缺点：
1.每一次调用poll都要将数据从用户拷贝到内核，返回时需要将数据从内核拷贝到用户，在文件描述符数量较多时开销较大
2.poll在底层是由内核依次遍历每一个fd，在文件描述符较多时开销较大
3.每一次调用poll都需要重新设置fds,从接口上来说使用不方便

多路转接的优点：
1.可以同时监视多个文件描述符
2.在特定场景下可以提高效率
3.可以一个进程处理多个fd，因为poll返回时，数据一定是就绪的

什么时候不适合使用多路转接？
进行I/O的时候，大部分时间都在进行拷贝，“等”的时间很少，这种情况下，应该使用线程池，而不是多路转接