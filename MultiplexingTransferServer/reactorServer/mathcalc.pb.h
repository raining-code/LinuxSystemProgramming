// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mathcalc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mathcalc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mathcalc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mathcalc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mathcalc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mathcalc_2eproto;
namespace mathcalc {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace mathcalc
PROTOBUF_NAMESPACE_OPEN
template<> ::mathcalc::Request* Arena::CreateMaybeMessage<::mathcalc::Request>(Arena*);
template<> ::mathcalc::Response* Arena::CreateMaybeMessage<::mathcalc::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mathcalc {

// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mathcalc.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mathcalc.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mathcalc_2eproto);
    return ::descriptor_table_mathcalc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 3,
    kLeftNumFieldNumber = 1,
    kRightNumFieldNumber = 2,
  };
  // string op = 3;
  void clear_op();
  const std::string& op() const;
  void set_op(const std::string& value);
  void set_op(std::string&& value);
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  std::string* mutable_op();
  std::string* release_op();
  void set_allocated_op(std::string* op);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_op();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_op(
      std::string* op);
  private:
  const std::string& _internal_op() const;
  void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // int32 leftNum = 1;
  void clear_leftnum();
  ::PROTOBUF_NAMESPACE_ID::int32 leftnum() const;
  void set_leftnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leftnum() const;
  void _internal_set_leftnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rightNum = 2;
  void clear_rightnum();
  ::PROTOBUF_NAMESPACE_ID::int32 rightnum() const;
  void set_rightnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rightnum() const;
  void _internal_set_rightnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mathcalc.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
  ::PROTOBUF_NAMESPACE_ID::int32 leftnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 rightnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mathcalc_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mathcalc.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mathcalc.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mathcalc_2eproto);
    return ::descriptor_table_mathcalc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 3,
    kLeftNumFieldNumber = 1,
    kRightNumFieldNumber = 2,
    kFlagFieldNumber = 4,
    kAnsFieldNumber = 5,
  };
  // string op = 3;
  void clear_op();
  const std::string& op() const;
  void set_op(const std::string& value);
  void set_op(std::string&& value);
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  std::string* mutable_op();
  std::string* release_op();
  void set_allocated_op(std::string* op);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_op();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_op(
      std::string* op);
  private:
  const std::string& _internal_op() const;
  void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // int32 leftNum = 1;
  void clear_leftnum();
  ::PROTOBUF_NAMESPACE_ID::int32 leftnum() const;
  void set_leftnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leftnum() const;
  void _internal_set_leftnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rightNum = 2;
  void clear_rightnum();
  ::PROTOBUF_NAMESPACE_ID::int32 rightnum() const;
  void set_rightnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rightnum() const;
  void _internal_set_rightnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool flag = 4;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // int32 ans = 5;
  void clear_ans();
  ::PROTOBUF_NAMESPACE_ID::int32 ans() const;
  void set_ans(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ans() const;
  void _internal_set_ans(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mathcalc.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
  ::PROTOBUF_NAMESPACE_ID::int32 leftnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 rightnum_;
  bool flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 ans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mathcalc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// int32 leftNum = 1;
inline void Request::clear_leftnum() {
  leftnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::_internal_leftnum() const {
  return leftnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::leftnum() const {
  // @@protoc_insertion_point(field_get:mathcalc.Request.leftNum)
  return _internal_leftnum();
}
inline void Request::_internal_set_leftnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leftnum_ = value;
}
inline void Request::set_leftnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leftnum(value);
  // @@protoc_insertion_point(field_set:mathcalc.Request.leftNum)
}

// int32 rightNum = 2;
inline void Request::clear_rightnum() {
  rightnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::_internal_rightnum() const {
  return rightnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::rightnum() const {
  // @@protoc_insertion_point(field_get:mathcalc.Request.rightNum)
  return _internal_rightnum();
}
inline void Request::_internal_set_rightnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rightnum_ = value;
}
inline void Request::set_rightnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rightnum(value);
  // @@protoc_insertion_point(field_set:mathcalc.Request.rightNum)
}

// string op = 3;
inline void Request::clear_op() {
  op_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request::op() const {
  // @@protoc_insertion_point(field_get:mathcalc.Request.op)
  return _internal_op();
}
inline void Request::set_op(const std::string& value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:mathcalc.Request.op)
}
inline std::string* Request::mutable_op() {
  // @@protoc_insertion_point(field_mutable:mathcalc.Request.op)
  return _internal_mutable_op();
}
inline const std::string& Request::_internal_op() const {
  return op_.Get();
}
inline void Request::_internal_set_op(const std::string& value) {
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_op(std::string&& value) {
  
  op_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mathcalc.Request.op)
}
inline void Request::set_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mathcalc.Request.op)
}
inline void Request::set_op(const char* value,
    size_t size) {
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mathcalc.Request.op)
}
inline std::string* Request::_internal_mutable_op() {
  
  return op_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_op() {
  // @@protoc_insertion_point(field_release:mathcalc.Request.op)
  return op_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  op_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mathcalc.Request.op)
}
inline std::string* Request::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mathcalc.Request.op)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return op_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_op(
    std::string* op) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (op != nullptr) {
    
  } else {
    
  }
  op_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      op, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mathcalc.Request.op)
}

// -------------------------------------------------------------------

// Response

// int32 leftNum = 1;
inline void Response::clear_leftnum() {
  leftnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_leftnum() const {
  return leftnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::leftnum() const {
  // @@protoc_insertion_point(field_get:mathcalc.Response.leftNum)
  return _internal_leftnum();
}
inline void Response::_internal_set_leftnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leftnum_ = value;
}
inline void Response::set_leftnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leftnum(value);
  // @@protoc_insertion_point(field_set:mathcalc.Response.leftNum)
}

// int32 rightNum = 2;
inline void Response::clear_rightnum() {
  rightnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_rightnum() const {
  return rightnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::rightnum() const {
  // @@protoc_insertion_point(field_get:mathcalc.Response.rightNum)
  return _internal_rightnum();
}
inline void Response::_internal_set_rightnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rightnum_ = value;
}
inline void Response::set_rightnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rightnum(value);
  // @@protoc_insertion_point(field_set:mathcalc.Response.rightNum)
}

// string op = 3;
inline void Response::clear_op() {
  op_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::op() const {
  // @@protoc_insertion_point(field_get:mathcalc.Response.op)
  return _internal_op();
}
inline void Response::set_op(const std::string& value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:mathcalc.Response.op)
}
inline std::string* Response::mutable_op() {
  // @@protoc_insertion_point(field_mutable:mathcalc.Response.op)
  return _internal_mutable_op();
}
inline const std::string& Response::_internal_op() const {
  return op_.Get();
}
inline void Response::_internal_set_op(const std::string& value) {
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_op(std::string&& value) {
  
  op_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mathcalc.Response.op)
}
inline void Response::set_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mathcalc.Response.op)
}
inline void Response::set_op(const char* value,
    size_t size) {
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mathcalc.Response.op)
}
inline std::string* Response::_internal_mutable_op() {
  
  return op_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_op() {
  // @@protoc_insertion_point(field_release:mathcalc.Response.op)
  return op_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  op_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mathcalc.Response.op)
}
inline std::string* Response::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mathcalc.Response.op)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return op_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_op(
    std::string* op) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (op != nullptr) {
    
  } else {
    
  }
  op_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      op, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mathcalc.Response.op)
}

// bool flag = 4;
inline void Response::clear_flag() {
  flag_ = false;
}
inline bool Response::_internal_flag() const {
  return flag_;
}
inline bool Response::flag() const {
  // @@protoc_insertion_point(field_get:mathcalc.Response.flag)
  return _internal_flag();
}
inline void Response::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void Response::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:mathcalc.Response.flag)
}

// int32 ans = 5;
inline void Response::clear_ans() {
  ans_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_ans() const {
  return ans_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::ans() const {
  // @@protoc_insertion_point(field_get:mathcalc.Response.ans)
  return _internal_ans();
}
inline void Response::_internal_set_ans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ans_ = value;
}
inline void Response::set_ans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ans(value);
  // @@protoc_insertion_point(field_set:mathcalc.Response.ans)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mathcalc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mathcalc_2eproto
